{% extends "layout.njk" %} {% block content %}
<h1>@sparkstone/css</h1>

<p>
  <code>@sparkstone/css</code> is a lightweight SCSS framework inspired by
  <a href="https://picocss.com" target="_blank">Pico.css</a>, but rebuilt from the ground up with
  <code>oklch()</code> color primitives and a powerful theme system based on native CSS variables.
</p>

<p>
  ðŸ“¦ <a href="https://www.npmjs.com/package/@sparkstone/css" target="_blank">View on NPM</a> Â· ðŸ’»
  <a href="https://github.com/sparkstonepdx/css" target="_blank">View on GitHub</a>
</p>

<ul>
  <li>ðŸŽ¨ Perceptually-uniform color scales via <code>oklch()</code></li>
  <li>ðŸŒ— Graceful light/dark theming using system preferences</li>
  <li>ðŸ§± Minimal class usage with sensible defaults</li>
  <li>âš¡ No JavaScript required for core styling</li>
  <li>ðŸ§© Sass functions and mixins for full control</li>
</ul>

<h2>Get Started</h2>
<p>Install the package with your preferred package manager:</p>

<pre><code class="language-bash"># pnpm
pnpm add @sparkstone/css

# yarn
yarn add @sparkstone/css

# npm
npm install @sparkstone/css</code></pre>

<p>Then import the theme:</p>

<pre><code class="language-js">// SCSS
import "@sparkstone/css/src/theme.scss";

// or precompiled CSS
import "@sparkstone/css/theme.css";</code></pre>

<h2>Theming</h2>
<p>The entire theme can be customized via CSS variables. For example:</p>

<button class="ghost copy-button" data-target="code-default-styles">Copy Code</button>
<pre><code id="code-default-styles" class="language-css">:root {
  --color: rebeccapurple;
  --primary-color: blue;
  --accent-color: oklch(from var(--color) l c calc(h + 180));
  --error-color: maroon;
}</code></pre>

<p>Light and dark mode follow system settings by default. Override manually with:</p>

<pre><code class="language-html">&lt;html data-color-scheme="light"&gt;
&lt;!-- or --&gt;
&lt;html data-color-scheme="dark"&gt;</code></pre>

<h2>Docs</h2>
<p>Explore styled components and utilities:</p>
<ul>
  <li><a href="forms.html">Form Elements</a></li>
  <li><a href="colors.html">Color Palettes</a></li>
  <li><a href="containers.html">Containers & Dialogs</a></li>
</ul>

<h2>Live Theme Preview</h2>
<p>Try customizing the theme color:</p>
<form style="display: flex; gap: 1rem; align-items: center">
  <label>
    Base Color
    <input type="color" id="base-color-picker" />
  </label>
  <label>
    Accent Color
    <input type="color" id="accent-color-picker" />
  </label>
</form>
{% endblock %} {% block scripts %}
<script type="module">
  const defaults = [
    ['--color', '#663399', 'sparkstone-base-color', 'base-color-picker'],
    ['--accent-color', '#009688', 'sparkstone-accent-color', 'accent-color-picker'],
  ];

  const getCSSVar = name =>
    getComputedStyle(document.documentElement).getPropertyValue(name).trim();

  for (const [cssVar, fallback, storageKey, inputId] of defaults) {
    const input = document.getElementById(inputId);
    const stored = sessionStorage.getItem(storageKey);
    if (stored) {
      document.documentElement.style.setProperty(cssVar, stored);
      input.value = stored;
    } else {
      try {
        const ctx = document.createElement('canvas').getContext('2d');
        ctx.fillStyle = getCSSVar(cssVar);
        input.value = ctx.fillStyle;
      } catch {
        input.value = fallback;
      }
    }

    input.addEventListener('input', () => {
      document.documentElement.style.setProperty(cssVar, input.value);
      sessionStorage.setItem(storageKey, input.value);
    });
  }
</script>
{% endblock %}
